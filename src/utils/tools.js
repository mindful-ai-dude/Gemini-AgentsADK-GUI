// src/utils/tools.js

// --- Built-in Google ADK Tools ---
// Based on google-sdk-docs.md
export const builtInTools = [
  {
    id: 'googlesearch',
    name: 'google_search', // Name used in ADK examples
    description: 'Performs a Google Search and returns results. Requires Gemini 2 model. Must display renderedContent if provided.',
    category: 'Built-in',
    parameters: {}, // Parameters handled implicitly by the framework/LLM
    requirements: "Gemini 2 Model, Display renderedContent",
    code_example: `from google.adk.tools import google_search\n\ntools = [google_search]` // Note: No () needed for import ref
  },
  {
    id: 'codeexecution',
    name: 'built_in_code_execution', // Name used in ADK examples
    description: 'Executes Python code blocks generated by the agent. Requires Gemini 2 model.',
    category: 'Built-in',
    parameters: {}, // Code is generated by LLM, not passed as parameter here
    requirements: "Gemini 2 Model",
    code_example: `from google.adk.tools import built_in_code_execution\n\ntools = [built_in_code_execution]`
  },
  {
    id: 'vertexaisearch',
    name: 'VertexAiSearchTool', // Class name used in ADK examples
    description: 'Searches across configured private Vertex AI Search data stores.',
    category: 'Built-in',
    parameters: { // Requires explicit configuration
        data_store_id: {
            type: 'string',
            description: 'Required. The full Vertex AI Search datastore resource ID (e.g., projects/.../dataStores/...).',
            required: true
        }
    },
    requirements: "Vertex AI Search Datastore ID",
    code_example: `from google.adk.tools import VertexAiSearchTool\n\nYOUR_DATASTORE_ID = "projects/..."\ntools = [VertexAiSearchTool(data_store_id=YOUR_DATASTORE_ID)]`
  }
  // Add other built-in tools if the ADK offers more
];

// --- Example Function Tools ---
// Updated based on Function Tool documentation
export const exampleFunctionTools = [
  {
    id: 'stockprice', // Changed ID
    name: 'get_stock_price', // Function name
    description: 'Retrieves the current stock price for a given symbol using yfinance.',
    category: 'Function',
    parameters: { // Defined by function signature
      symbol: {
        type: 'string',
        description: 'The stock symbol (e.g., "AAPL", "GOOG"). Required.'
        // No default values as per docs
      }
    },
    return_info: "Returns a dictionary: {'result': <price_float_or_None>}", // Describe return structure
    requirements: "`pip install yfinance`",
    // Code snippet showing the Python function definition
    code: `import yfinance as yf
import json # Example if returning complex data, though float is fine here

# Note: ADK automatically wraps Python functions added to the tools list.
# No explicit @tool decorator is shown as required in the basic Function Tool docs.

def get_stock_price(symbol: str) -> float | None: # Use type hints for clarity
    \"\"\"
    Retrieves the current closing stock price for a given symbol using yfinance.

    Args:
        symbol (str): The stock symbol (e.g., "AAPL", "GOOG").

    Returns:
        float: The current stock price as a float.
        None: If the symbol is invalid or data cannot be retrieved.
    \"\"\"
    print(f"--- Tool Executing: get_stock_price for {symbol} ---")
    try:
        stock = yf.Ticker(symbol)
        # Get the most recent closing price
        historical_data = stock.history(period="1d", interval="1m") # Try 1m interval for recent price
        if not historical_data.empty:
            current_price = historical_data['Close'].iloc[-1]
            print(f"--- Tool Result: {current_price} ---")
            # Simple float return is acceptable, ADK wraps it as {'result': current_price}
            return float(current_price)
        else:
            # Check previous close if 1d data is empty (market closed?)
            historical_data = stock.history(period="2d")
            if not historical_data.empty:
                 previous_close = historical_data['Close'].iloc[-1]
                 print(f"--- Tool Result (Previous Close): {previous_close} ---")
                 return float(previous_close)
            else:
                 print(f"--- Tool Warning: No data found for {symbol} ---")
                 return None # Indicate failure clearly
    except Exception as e:
        print(f"--- Tool Error retrieving stock price for {symbol}: {e} ---")
        return None # Indicate failure clearly

# --- ADK Agent Setup (Example) ---
# from google.adk.agents import Agent
# agent = Agent(..., tools=[get_stock_price]) # Function added directly
`
  },
   {
    id: 'long_approval',
    name: 'ask_for_approval', // Function name
    description: 'Simulates asking a manager for approval (Long Running).',
    category: 'Long Running Function', // New category for UI filtering
    parameters: {
      purpose: { type: 'string', description: 'Reason for the request.' },
      amount: { type: 'float', description: 'Amount requested.' }
      // tool_context is implicitly passed by ADK, not defined here
    },
    return_info: "Initially returns {'status': 'pending', ...}. Final update sent later.",
    requirements: "Requires Agent Client logic to handle intermediate/final responses.",
    code: `from google.adk.tools import LongRunningFunctionTool
from google.adk.tools import ToolContext # Needed for type hint if used
from typing import Any, Dict

# 1. Define the long running function
def ask_for_approval(
    purpose: str, amount: float # tool_context: ToolContext - ADK passes this implicitly
) -> Dict[str, Any]:
    \"\"\"Simulates asking for approval and returns initial pending status."""
    print(f"--- Tool Executing (Long Running): ask_for_approval for '{purpose}', amount {amount} ---")
    # In reality: Create ticket, notify manager, etc.
    ticket_id = f"approval-ticket-{hash(purpose + str(amount)) % 10000}" # Generate pseudo-unique ID
    print(f"--- Tool Initial Return: Pending approval (Ticket: {ticket_id}) ---")
    return {'status': 'pending', 'approver': 'manager@example.com', 'purpose' : purpose, 'amount': amount, 'ticket_id': ticket_id}

# 2. Wrap the function
# This would typically be done where the agent is defined
# approval_tool = LongRunningFunctionTool(func=ask_for_approval)

# --- ADK Agent Setup (Example) ---
# from google.adk.agents import Agent
# agent = Agent(..., tools=[approval_tool]) # Add the wrapped tool
`
  },
  // Add more examples if needed
];

// --- Example Agent-as-Tool Reference ---
// This isn't a tool definition itself, but represents how another agent might be configured
// to be called *as if* it were a tool by a parent agent.
export const exampleAgentAsTool = {
    id: 'summary_agent_ref', // Unique ID for this *reference*
    name: 'summarize_text', // The tool name the *parent* agent uses to call the target
    description: 'Summarizes long passages of text by calling the dedicated Summary Agent.',
    category: 'Agent-as-Tool',
    targetAgentName: 'summary_agent', // Name of the agent being called
    requirements: "Requires 'summary_agent' to be defined and runnable.",
    code_example: `from google.adk.agents import Agent
from google.adk.tools import AgentTool

# Assume summary_agent is defined elsewhere
# from .summary_agent_def import summary_agent

# Define the tool that calls the other agent
summarizer_tool = AgentTool(agent=summary_agent, name="summarize_text") # Explicitly name the tool call

# Add it to the parent agent's tools
parent_agent = Agent(
    # ... other parent agent params
    instruction="...If you need to summarize text, use the 'summarize_text' tool...",
    tools=[summarizer_tool]
)`
};

// Combine all tools for easier filtering in the UI, maybe add Agent-as-Tool example here too
export const allTools = [
    ...builtInTools,
    ...exampleFunctionTools,
    // Add exampleAgentAsTool here if you want it selectable,
    // though it's more of a configuration pattern example.
    // { ...exampleAgentAsTool, id: 'agent_tool_example' } // Give it a unique ID if adding
];